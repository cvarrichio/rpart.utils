crs$sample <- crs$train <- sample(nrow(crs$dataset), 0.8*crs$nobs) # 11308 observations
crs$validate <- sample(setdiff(seq_len(nrow(crs$dataset)), crs$train), 0.1*crs$nobs) # 1413 observations
crs$test <- setdiff(setdiff(seq_len(nrow(crs$dataset)), crs$train), crs$validate) # 1415 observations
##This is the input used for model one (excluding any specific identifiers, such as HCC IDs or ICD-9 codes)
crs$input <- c("REFERRAL_SERVICE_CATEGORY", "AUTH_BENEFIT_COUNT_APPROVED", "AUTH_BENEFIT_COUNT_REMAINING", "AUTH_BENEFIT_TYPE",
"AUTH_SERV_SET_STATUS", "LEVEL_FOUR_DIAG_CATEGORY", "LEVEL_ONE_DIAG_CATEGORY", "LEVEL_THREE_DIAG_CATEGORY",
"LEVEL_TWO_DIAG_CATEGORY", "REFERRER_NPI","PROVIDER_TAXONOMY_NAME", "LEVEL_ONE_TAX_CATEGORY", "LEVEL_TWO_TAX_CATEGORY",
"LEVEL_THREE_TAX_CATEGORY", "REFERREE_NPI","PROVIDER_TAXONOMY_NAME.1", "SPECIALIZATION.1", "LEVEL_ONE_TAX_CATEGORY.1",
"LEVEL_TWO_TAX_CATEGORY.1", "LEVEL_THREE_TAX_CATEGORY.1", "SERVICE_LEVEL_ONE_DESCRIPTION", "SERVICE_LEVEL_TWO_DESCRIPTION",
"ACCOUNT_TYPE", "SUBGROUP_NAME", "MEDICAL_PRODUCT_NAME", "AGE",
"MEMBER_GENDER", "FINANCIAL_REGION_CODE")
crs$rpart <- rpart(HIGH_CLAIM ~ .,
data=crs$dataset[crs$train, c(crs$input, crs$target)],
method="class",
parms=list(split="information"),
control=rpart.control(maxdepth=6,minsplit=30,cp=0.015000))
test$HIGH_CLAIM<-test$AMT_PAID>10000
crs$rpart <- rpart(HIGH_CLAIM ~ .,
data=crs$dataset[crs$train, c(crs$input, crs$target)],
method="class",
parms=list(split="information"),
control=rpart.control(maxdepth=6,minsplit=30,cp=0.015000))
crs$dataset<-test
crs$rpart <- rpart(HIGH_CLAIM ~ .,
data=crs$dataset[crs$train, c(crs$input, crs$target)],
method="class",
parms=list(split="information"),
control=rpart.control(maxdepth=6,minsplit=30,cp=0.015000))
crs<-new.env(parent=baseenv())
crs$dataset<-test
crs$nobs <- nrow(crs$dataset) # 14136 observations
crs$sample <- crs$train <- sample(nrow(crs$dataset), 0.8*crs$nobs) # 11308 observations
crs$validate <- sample(setdiff(seq_len(nrow(crs$dataset)), crs$train), 0.1*crs$nobs) # 1413 observations
crs$test <- setdiff(setdiff(seq_len(nrow(crs$dataset)), crs$train), crs$validate) # 1415 observations
##This is the input used for model one (excluding any specific identifiers, such as HCC IDs or ICD-9 codes)
crs$input <- c("REFERRAL_SERVICE_CATEGORY", "AUTH_BENEFIT_COUNT_APPROVED", "AUTH_BENEFIT_COUNT_REMAINING", "AUTH_BENEFIT_TYPE",
"AUTH_SERV_SET_STATUS", "LEVEL_FOUR_DIAG_CATEGORY", "LEVEL_ONE_DIAG_CATEGORY", "LEVEL_THREE_DIAG_CATEGORY",
"LEVEL_TWO_DIAG_CATEGORY", "REFERRER_NPI","PROVIDER_TAXONOMY_NAME", "LEVEL_ONE_TAX_CATEGORY", "LEVEL_TWO_TAX_CATEGORY",
"LEVEL_THREE_TAX_CATEGORY", "REFERREE_NPI","PROVIDER_TAXONOMY_NAME.1", "SPECIALIZATION.1", "LEVEL_ONE_TAX_CATEGORY.1",
"LEVEL_TWO_TAX_CATEGORY.1", "LEVEL_THREE_TAX_CATEGORY.1", "SERVICE_LEVEL_ONE_DESCRIPTION", "SERVICE_LEVEL_TWO_DESCRIPTION",
"ACCOUNT_TYPE", "SUBGROUP_NAME", "MEDICAL_PRODUCT_NAME", "AGE",
"MEMBER_GENDER", "FINANCIAL_REGION_CODE")
crs$target  <- "HIGH_CLAIM"
library(rpart)
set.seed(crs$seed)
crs$rpart <- rpart(HIGH_CLAIM ~ .,
data=crs$dataset[crs$train, c(crs$input, crs$target)],
method="class",
parms=list(split="information"),
control=rpart.control(maxdepth=6,minsplit=30,cp=0.015000))
crs$rpart
rpart.lists(crs$rpart)
rpart.lists(fit)
fit$frame
print("ncat=")
#' Creates lists of variable values (factor levels) associated with each rule in an rpart object.
#'
#'
#' @param object an rpart object
#' @return a list of lists
#' @export
#' @examples
#' library(rpart)
#' fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
#' rpart.lists(fit)
rpart.lists <- function(object)
{
ff <- object$frame
n <- nrow(ff)
if (n == 1L) return("root")            # special case of no splits
is.leaf <- (ff$var == "<leaf>")
whichrow <- !is.leaf
vnames <- ff$var[whichrow] # the variable names for the primary splits
index <- cumsum(c(1, ff$ncompete + ff$nsurrogate + !is.leaf))
irow <- index[c(whichrow, FALSE)] # we only care about the primary split
ncat <- object$splits[irow, 2L]
lsplit <- rsplit <- list()
## Now to work: first create labels for the left and right splits,
##  but not for leaves of course
##
#
if (any(ncat < 2L)) {               # any continuous vars ?
jrow <- irow[ncat < 2L]
cutpoint <- object$splits[jrow, 4L]
temp1 <- (ifelse(ncat < 0, "<", ">="))[ncat < 2L]
temp2 <- (ifelse(ncat < 0, ">=", "<"))[ncat < 2L]
lsplit[ncat<2L] <- cutpoint
#lsplit[ncat<2L] <- lapply(lsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
rsplit[ncat<2L] <- cutpoint
#rsplit[ncat<2L] <- lapply(rsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
}
print ("Whichrow = ")
print(whichrow)
print("vnames = ")
print(vnames)
print("index = ")
print(index)
print("irow = ")
print(irow)
print("ncat=")
print(ncat)
if (any(ncat > 1L)) {               # any categorical variables ?
xlevels <- attr(object, "xlevels")
##
## jrow will be the row numbers of factors within lsplit and rsplit
## crow the row number in "csplit"
## and cindex the index on the "xlevels" list
##
jrow <- seq_along(ncat)[ncat > 1L]
crow <- object$splits[irow[ncat > 1L], 4L] #row number in csplit
cindex <- (match(vnames, names(xlevels)))[ncat > 1L]
lsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==1L])
rsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==3L])
lsplit<-lapply(seq_along(lsplit), function (i) structure(lsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,"<",">="),"=")))
rsplit<-lapply(seq_along(lsplit), function (i) structure(rsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,">=","<"),"=")))
names(lsplit)<-vnames
names(rsplit)<-vnames
results<-list("L"=lsplit,"R"=rsplit)
return(results)
}
}
rpart.lists(fit)
#' Creates lists of variable values (factor levels) associated with each rule in an rpart object.
#'
#'
#' @param object an rpart object
#' @return a list of lists
#' @export
#' @examples
#' library(rpart)
#' fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
#' rpart.lists(fit)
rpart.lists <- function(object)
{
ff <- object$frame
n <- nrow(ff)
if (n == 1L) return("root")            # special case of no splits
is.leaf <- (ff$var == "<leaf>")
whichrow <- !is.leaf
vnames <- ff$var[whichrow] # the variable names for the primary splits
index <- cumsum(c(1, ff$ncompete + ff$nsurrogate + !is.leaf))
irow <- index[c(whichrow, FALSE)] # we only care about the primary split
ncat <- object$splits[irow, 2L]
lsplit <- rsplit <- list()
## Now to work: first create labels for the left and right splits,
##  but not for leaves of course
##
#
if (any(ncat < 2L)) {               # any continuous vars ?
jrow <- irow[ncat < 2L]
cutpoint <- object$splits[jrow, 4L]
temp1 <- (ifelse(ncat < 0, "<", ">="))[ncat < 2L]
temp2 <- (ifelse(ncat < 0, ">=", "<"))[ncat < 2L]
lsplit[ncat<2L] <- cutpoint
#lsplit[ncat<2L] <- lapply(lsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
rsplit[ncat<2L] <- cutpoint
#rsplit[ncat<2L] <- lapply(rsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
}
print ("Whichrow = ")
print(whichrow)
print("vnames = ")
print(vnames)
print("index = ")
print(index)
print("irow = ")
print(irow)
print("ncat=")
print(ncat)
print(lsplit)
print(rsplit)
if (any(ncat > 1L)) {               # any categorical variables ?
xlevels <- attr(object, "xlevels")
##
## jrow will be the row numbers of factors within lsplit and rsplit
## crow the row number in "csplit"
## and cindex the index on the "xlevels" list
##
jrow <- seq_along(ncat)[ncat > 1L]
crow <- object$splits[irow[ncat > 1L], 4L] #row number in csplit
cindex <- (match(vnames, names(xlevels)))[ncat > 1L]
lsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==1L])
rsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==3L])
lsplit<-lapply(seq_along(lsplit), function (i) structure(lsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,"<",">="),"=")))
rsplit<-lapply(seq_along(lsplit), function (i) structure(rsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,">=","<"),"=")))
names(lsplit)<-vnames
names(rsplit)<-vnames
results<-list("L"=lsplit,"R"=rsplit)
return(results)
}
}
rpart.lists(fit)
#' Creates lists of variable values (factor levels) associated with each rule in an rpart object.
#'
#'
#' @param object an rpart object
#' @return a list of lists
#' @export
#' @examples
#' library(rpart)
#' fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
#' rpart.lists(fit)
rpart.lists <- function(object)
{
ff <- object$frame
n <- nrow(ff)
if (n == 1L) return("root")            # special case of no splits
is.leaf <- (ff$var == "<leaf>")
whichrow <- !is.leaf
vnames <- ff$var[whichrow] # the variable names for the primary splits
index <- cumsum(c(1, ff$ncompete + ff$nsurrogate + !is.leaf))
irow <- index[c(whichrow, FALSE)] # we only care about the primary split
ncat <- object$splits[irow, 2L]
lsplit <- rsplit <- list()
## Now to work: first create labels for the left and right splits,
##  but not for leaves of course
##
#
if (any(ncat < 2L)) {               # any continuous vars ?
jrow <- irow[ncat < 2L]
cutpoint <- object$splits[jrow, 4L]
temp1 <- (ifelse(ncat < 0, "<", ">="))[ncat < 2L]
temp2 <- (ifelse(ncat < 0, ">=", "<"))[ncat < 2L]
lsplit[ncat<2L] <- cutpoint
#lsplit[ncat<2L] <- lapply(lsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
rsplit[ncat<2L] <- cutpoint
#rsplit[ncat<2L] <- lapply(rsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
}
#     print ("Whichrow = ")
#     print(whichrow)
#     print("vnames = ")
#     print(vnames)
#     print("index = ")
#     print(index)
#     print("irow = ")
#     print(irow)
#     print("ncat=")
#     print(ncat)
print(lsplit)
print(rsplit)
if (any(ncat > 1L)) {               # any categorical variables ?
xlevels <- attr(object, "xlevels")
##
## jrow will be the row numbers of factors within lsplit and rsplit
## crow the row number in "csplit"
## and cindex the index on the "xlevels" list
##
jrow <- seq_along(ncat)[ncat > 1L]
crow <- object$splits[irow[ncat > 1L], 4L] #row number in csplit
cindex <- (match(vnames, names(xlevels)))[ncat > 1L]
lsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==1L])
rsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==3L])
print(lsplit)
print(rsplit)
lsplit<-lapply(seq_along(lsplit), function (i) structure(lsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,"<",">="),"=")))
rsplit<-lapply(seq_along(lsplit), function (i) structure(rsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,">=","<"),"=")))
names(lsplit)<-vnames
names(rsplit)<-vnames
results<-list("L"=lsplit,"R"=rsplit)
return(results)
}
}
rpart.lists(fit)
#' Creates lists of variable values (factor levels) associated with each rule in an rpart object.
#'
#'
#' @param object an rpart object
#' @return a list of lists
#' @export
#' @examples
#' library(rpart)
#' fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
#' rpart.lists(fit)
rpart.lists <- function(object)
{
ff <- object$frame
n <- nrow(ff)
if (n == 1L) return("root")            # special case of no splits
is.leaf <- (ff$var == "<leaf>")
whichrow <- !is.leaf
vnames <- ff$var[whichrow] # the variable names for the primary splits
index <- cumsum(c(1, ff$ncompete + ff$nsurrogate + !is.leaf))
irow <- index[c(whichrow, FALSE)] # we only care about the primary split
ncat <- object$splits[irow, 2L]
lsplit <- rsplit <- list()
## Now to work: first create labels for the left and right splits,
##  but not for leaves of course
##
#
if (any(ncat < 2L)) {               # any continuous vars ?
jrow <- irow[ncat < 2L]
cutpoint <- object$splits[jrow, 4L]
temp1 <- (ifelse(ncat < 0, "<", ">="))[ncat < 2L]
temp2 <- (ifelse(ncat < 0, ">=", "<"))[ncat < 2L]
lsplit[ncat<2L] <- cutpoint
#lsplit[ncat<2L] <- lapply(lsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
rsplit[ncat<2L] <- cutpoint
#rsplit[ncat<2L] <- lapply(rsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
}
#     print ("Whichrow = ")
#     print(whichrow)
#     print("vnames = ")
#     print(vnames)
#     print("index = ")
#     print(index)
#     print("irow = ")
#     print(irow)
#     print("ncat=")
#     print(ncat)
print(lsplit)
print(rsplit)
#   if (any(ncat > 1L)) {               # any categorical variables ?
#     xlevels <- attr(object, "xlevels")
#     ##
#     ## jrow will be the row numbers of factors within lsplit and rsplit
#     ## crow the row number in "csplit"
#     ## and cindex the index on the "xlevels" list
#     ##
#     jrow <- seq_along(ncat)[ncat > 1L]
#     crow <- object$splits[irow[ncat > 1L], 4L] #row number in csplit
#     cindex <- (match(vnames, names(xlevels)))[ncat > 1L]
#
#
#     lsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==1L])
#     rsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==3L])
print(lsplit)
print(rsplit)
lsplit<-lapply(seq_along(lsplit), function (i) structure(lsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,"<",">="),"=")))
rsplit<-lapply(seq_along(lsplit), function (i) structure(rsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,">=","<"),"=")))
names(lsplit)<-vnames
names(rsplit)<-vnames
results<-list("L"=lsplit,"R"=rsplit)
return(results)
}
}
#   print(lsplit)
#   print(rsplit)
#' Creates lists of variable values (factor levels) associated with each rule in an rpart object.
#'
#'
#' @param object an rpart object
#' @return a list of lists
#' @export
#' @examples
#' library(rpart)
#' fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
#' rpart.lists(fit)
rpart.lists <- function(object)
{
ff <- object$frame
n <- nrow(ff)
if (n == 1L) return("root")            # special case of no splits
is.leaf <- (ff$var == "<leaf>")
whichrow <- !is.leaf
vnames <- ff$var[whichrow] # the variable names for the primary splits
index <- cumsum(c(1, ff$ncompete + ff$nsurrogate + !is.leaf))
irow <- index[c(whichrow, FALSE)] # we only care about the primary split
ncat <- object$splits[irow, 2L]
lsplit <- rsplit <- list()
## Now to work: first create labels for the left and right splits,
##  but not for leaves of course
##
#
if (any(ncat < 2L)) {               # any continuous vars ?
jrow <- irow[ncat < 2L]
cutpoint <- object$splits[jrow, 4L]
temp1 <- (ifelse(ncat < 0, "<", ">="))[ncat < 2L]
temp2 <- (ifelse(ncat < 0, ">=", "<"))[ncat < 2L]
lsplit[ncat<2L] <- cutpoint
#lsplit[ncat<2L] <- lapply(lsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
rsplit[ncat<2L] <- cutpoint
#rsplit[ncat<2L] <- lapply(rsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
}
#     print ("Whichrow = ")
#     print(whichrow)
#     print("vnames = ")
#     print(vnames)
#     print("index = ")
#     print(index)
#     print("irow = ")
#     print(irow)
#     print("ncat=")
#     print(ncat)
#   print(lsplit)
#   print(rsplit)
if (any(ncat > 1L))
{               # any categorical variables ?
xlevels <- attr(object, "xlevels")
##
## jrow will be the row numbers of factors within lsplit and rsplit
## crow the row number in "csplit"
## and cindex the index on the "xlevels" list
##
jrow <- seq_along(ncat)[ncat > 1L]
crow <- object$splits[irow[ncat > 1L], 4L] #row number in csplit
cindex <- (match(vnames, names(xlevels)))[ncat > 1L]
lsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==1L])
rsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==3L])
lsplit<-lapply(seq_along(lsplit), function (i) structure(lsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,"<",">="),"=")))
rsplit<-lapply(seq_along(lsplit), function (i) structure(rsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,">=","<"),"=")))
names(lsplit)<-vnames
names(rsplit)<-vnames
results<-list("L"=lsplit,"R"=rsplit)
}
return(results)
}
rpart.lists(fit)
#' Creates lists of variable values (factor levels) associated with each rule in an rpart object.
#'
#'
#' @param object an rpart object
#' @return a list of lists
#' @export
#' @examples
#' library(rpart)
#' fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
#' rpart.lists(fit)
rpart.lists <- function(object)
{
ff <- object$frame
n <- nrow(ff)
if (n == 1L) return("root")            # special case of no splits
is.leaf <- (ff$var == "<leaf>")
whichrow <- !is.leaf
vnames <- ff$var[whichrow] # the variable names for the primary splits
index <- cumsum(c(1, ff$ncompete + ff$nsurrogate + !is.leaf))
irow <- index[c(whichrow, FALSE)] # we only care about the primary split
ncat <- object$splits[irow, 2L]
lsplit <- rsplit <- list()
## Now to work: first create labels for the left and right splits,
##  but not for leaves of course
##
#
if (any(ncat < 2L)) {               # any continuous vars ?
jrow <- irow[ncat < 2L]
cutpoint <- object$splits[jrow, 4L]
temp1 <- (ifelse(ncat < 0, "<", ">="))[ncat < 2L]
temp2 <- (ifelse(ncat < 0, ">=", "<"))[ncat < 2L]
lsplit[ncat<2L] <- cutpoint
#lsplit[ncat<2L] <- lapply(lsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
rsplit[ncat<2L] <- cutpoint
#rsplit[ncat<2L] <- lapply(rsplit[ncat<2L],function (x) structure(x, 'numeric'=TRUE))
}
#     print ("Whichrow = ")
#     print(whichrow)
#     print("vnames = ")
#     print(vnames)
#     print("index = ")
#     print(index)
#     print("irow = ")
#     print(irow)
#     print("ncat=")
#     print(ncat)
#   print(lsplit)
#   print(rsplit)
if (any(ncat > 1L))
{               # any categorical variables ?
xlevels <- attr(object, "xlevels")
##
## jrow will be the row numbers of factors within lsplit and rsplit
## crow the row number in "csplit"
## and cindex the index on the "xlevels" list
##
jrow <- seq_along(ncat)[ncat > 1L]
crow <- object$splits[irow[ncat > 1L], 4L] #row number in csplit
cindex <- (match(vnames, names(xlevels)))[ncat > 1L]
lsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==1L])
rsplit[jrow]<-lapply(seq_along(jrow),function (i) xlevels[[cindex[i]]][object$csplit[crow[i], ]==3L])
}
lsplit<-lapply(seq_along(lsplit), function (i) structure(lsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,"<",">="),"=")))
rsplit<-lapply(seq_along(lsplit), function (i) structure(rsplit[[i]], "compare"=ifelse(ncat[i]<2L,ifelse(ncat[i]<0,">=","<"),"=")))
names(lsplit)<-vnames
names(rsplit)<-vnames
results<-list("L"=lsplit,"R"=rsplit)
return(results)
}
rpart.lists(fit)
rpart.rules(fit)
rpart.subrules.table(fit)
fit
library(rpart.utils)
roxygenize(package.dir='.')
library("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::create_description('.')
devtools::create_description('.')
devtools::create_description('.')
?description
??description
library(rpart.utils)
library(rpart.utils)
library(rpart.utils)
install.packages("texi2dvi")
??texi
install.packages("devtools",dependencies=c("Depends","Suggests"))
install.packages("tools",dependencies=c("Depends","Suggests"))
install.packages("tools", dependencies = c("Depends", "Suggests"))
install.packages("tools", dependencies = c("Depends", "Suggests"))
install.packages("tools", dependencies = c("Depends", "Suggests"))
tools::texi2pdf
library(tools)
library(rpart.utils)
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=":"))
Sys.getenv("PATH")
Sys.which("pdflatex")
library(rpart.utils)
Sys.which("pdflatex")
Sys.which("pdflatex")<-"hello"
Sys.which("pdflatex")<-"/Program Files/MiKTeX 2.9/miktex/bin/x64/pdflatex.exe"
